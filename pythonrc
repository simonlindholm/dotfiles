import rlcompleter, readline, random, math, re, sys, os, inspect, time, struct
from base64 import b64encode, b64decode, urlsafe_b64encode, urlsafe_b64decode
from math import *
del pow
readline.parse_and_bind('tab:complete')

def disas(x):
    print(inspect.getsource(x))

def tempcol(f): # 0 = red, 1 = green
    cols = [2-f*2, 1, 2-f*2] if f >= 0.5 else [1, 2*f, 2*f]
    return [min(max(round(x * 255), 0), 255) for x in cols]

def color(cols, fg=38):
    r,g,b = tempcol(cols) if isinstance(cols, float) else cols
    return f"\x1b[{fg};2;{r};{g};{b}m"

def bgcolor(f):
    return color(f, 48)

def ftoi(x):
    return struct.unpack(">I", struct.pack(">f", x))[0]

def itof(x):
    return struct.unpack(">f", struct.pack(">I", x))[0]

def tofloat(x):
    return itof(ftoi(x))

RESET = "\x1b[0m"
